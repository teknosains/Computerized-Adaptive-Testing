{
  "version": 3,
  "sources": ["../../../app/routes/tests.$testId.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/tests.$testId.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/tests.$testId.tsx\");\n  import.meta.hot.lastModified = \"1747716749494.9998\";\n}\n// REMIX HMR END\n\nimport { useEffect, useState } from \"react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useNavigate, useSubmit } from \"@remix-run/react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Activity, AlertCircle, Clock } from \"lucide-react\";\nimport { getTest } from \"~/models/test.server\";\nimport { requireUser } from \"~/utils/session.server\";\nimport { getNextQuestion } from \"~/utils/irt.server\";\nimport { createTestSession, updateTestSession } from \"~/models/test-session.server\";\nexport async function loader({\n  request,\n  params\n}) {\n  const user = await requireUser(request);\n  const {\n    testId\n  } = params;\n  if (!testId) {\n    return redirect(\"/tests\");\n  }\n  const test = await getTest(testId);\n  if (!test) {\n    throw new Response(\"Test not found\", {\n      status: 404\n    });\n  }\n\n  // Create a new test session or resume an existing one\n  const session = await createTestSession(user.id, testId);\n\n  // Get the next question based on IRT\n  const currentQuestion = await getNextQuestion(session.id, session.currentAbility);\n  return json({\n    test,\n    session,\n    currentQuestion\n  });\n}\nexport async function action({\n  request,\n  params\n}) {\n  const user = await requireUser(request);\n  const formData = await request.formData();\n  const sessionId = formData.get(\"sessionId\");\n  const questionId = formData.get(\"questionId\");\n  const answer = formData.get(\"answer\");\n  const timeSpent = formData.get(\"timeSpent\");\n\n  // Update the session with the answer\n  const updatedSession = await updateTestSession({\n    sessionId,\n    questionId,\n    answer,\n    timeSpent: parseInt(timeSpent, 10)\n  });\n\n  // Check if the test is completed\n  if (updatedSession.isComplete) {\n    return redirect(`/tests/${params.testId}/results?sessionId=${sessionId}`);\n  }\n\n  // Get the next question\n  const nextQuestion = await getNextQuestion(sessionId, updatedSession.currentAbility);\n  return json({\n    session: updatedSession,\n    nextQuestion\n  });\n}\nexport default function TestPage() {\n  _s();\n  const {\n    test,\n    session,\n    currentQuestion\n  } = useLoaderData();\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const navigate = useNavigate();\n  const submit = useSubmit();\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeSpent(prev => prev + 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  useEffect(() => {\n    // Reset state when a new question is shown\n    setSelectedAnswer(null);\n    setTimeSpent(0);\n  }, [currentQuestion?.id]);\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\n  };\n  const handleSubmitAnswer = () => {\n    if (!selectedAnswer || isSubmitting) return;\n    setIsSubmitting(true);\n    const formData = new FormData();\n    formData.append(\"sessionId\", session.id);\n    formData.append(\"questionId\", currentQuestion.id);\n    formData.append(\"answer\", selectedAnswer);\n    formData.append(\"timeSpent\", timeSpent.toString());\n    submit(formData, {\n      method: \"post\"\n    });\n  };\n  const questionProgress = Math.round(session.answeredQuestions.length / test.maxQuestions * 100);\n  return <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n      <header className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">{test.title}</h1>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center text-gray-600\">\n              <Clock className=\"h-5 w-5 mr-1\" />\n              <span>{formatTime(timeSpent)}</span>\n            </div>\n            \n            <div className=\"hidden md:flex items-center\">\n              <Activity className=\"h-5 w-5 mr-1 text-primary-500\" />\n              <span className=\"text-sm font-medium\">\n                Question {session.answeredQuestions.length + 1} of approximately {test.maxQuestions}\n              </span>\n            </div>\n            \n            <button onClick={() => {\n            if (confirm(\"Are you sure you want to exit this test? Your progress will be saved.\")) {\n              navigate(\"/tests\");\n            }\n          }} className=\"btn btn-outline py-1\">\n              Exit\n            </button>\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"max-w-7xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"progress-bar\">\n          <div className=\"progress-bar-fill\" style={{\n          width: `${questionProgress}%`\n        }}></div>\n        </div>\n      </div>\n      \n      <main className=\"flex-grow flex items-center justify-center p-4\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div key={currentQuestion?.id} initial={{\n          opacity: 0,\n          y: 20\n        }} animate={{\n          opacity: 1,\n          y: 0\n        }} exit={{\n          opacity: 0,\n          y: -20\n        }} transition={{\n          duration: 0.3\n        }} className=\"card w-full max-w-3xl p-6 md:p-8\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl md:text-2xl font-semibold mb-4\">\n                {currentQuestion?.content}\n              </h2>\n              \n              {currentQuestion?.imageUrl && <div className=\"mb-4\">\n                  <img src={currentQuestion.imageUrl} alt=\"Question visual\" className=\"w-full rounded-lg\" />\n                </div>}\n              \n              <div className=\"space-y-3\">\n                {currentQuestion?.options.map((option, index) => <div key={index} onClick={() => setSelectedAnswer(option.id)} className={`p-4 border rounded-lg cursor-pointer transition-all duration-200 ${selectedAnswer === option.id ? \"border-primary-500 bg-primary-50\" : \"border-gray-200 hover:border-primary-300\"}`}>\n                    <div className=\"flex items-start\">\n                      <div className={`h-5 w-5 mr-3 rounded-full flex items-center justify-center border ${selectedAnswer === option.id ? \"bg-primary-500 border-primary-500\" : \"border-gray-300\"}`}>\n                        {selectedAnswer === option.id && <div className=\"h-2 w-2 rounded-full bg-white\" />}\n                      </div>\n                      <span className={selectedAnswer === option.id ? \"font-medium\" : \"\"}>\n                        {option.text}\n                      </span>\n                    </div>\n                  </div>)}\n              </div>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <div className=\"text-sm text-gray-500 flex items-center\">\n                <AlertCircle className=\"h-4 w-4 mr-1\" />\n                <span>Select an answer to continue</span>\n              </div>\n              \n              <button onClick={handleSubmitAnswer} disabled={!selectedAnswer || isSubmitting} className={`btn btn-primary px-8 ${!selectedAnswer || isSubmitting ? \"opacity-50 cursor-not-allowed\" : \"\"}`}>\n                {isSubmitting ? \"Submitting...\" : \"Next Question\"}\n              </button>\n            </div>\n          </motion.div>\n        </AnimatePresence>\n      </main>\n    </div>;\n}\n_s(TestPage, \"L0bd/rUKSB6+gr+I6B5oS9iDQvQ=\", false, function () {\n  return [useLoaderData, useNavigate, useSubmit];\n});\n_c = TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
